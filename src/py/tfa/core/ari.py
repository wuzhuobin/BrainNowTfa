#%%
import numpy as np

#%% 
bp = [   4.105527,   5.471468,   1.806384,   4.831645,   7.734527,   7.854286,   9.471881,   8.516360,   7.386151,   7.987390,   7.694860,   7.623122,   6.499352,
    8.578045,   1.043288,   2.107777,   9.954206,   8.422959,   8.592525,   8.679658,   3.977778,   5.901232,  12.662747,  10.480637,  11.663775,  11.546634,
   11.136624,   9.524513,   8.325259,   8.269232,   7.671183,   4.344026,   1.390388,  10.858819,  11.111763,   9.663990,  11.727971,  10.399589,   9.459028,
    9.424981,   9.553996,   9.025673,   9.208412,   9.324416,   9.336444,   8.593217,   8.019295,   8.829322,   8.113567,   6.479970,   5.145257,   6.375275,
    6.193899,   5.052220,   6.264349,   7.149634,   6.276294,   6.544337,   7.393448,   8.637187,   8.787210,   9.057671,  10.142554,   9.860212,   7.829468,
    7.305167,   9.225870,   7.680786,   7.390218,   8.520436,   9.087340,   8.721394,   9.790651,  10.619178,   9.800581,   9.986518,  10.419561,   8.763651,
    8.640534,   8.161282,   9.023582,   8.157266,   7.114531,   6.892678,   7.697617,   7.636964,   7.300038,   6.972884,   8.212391,   8.656462,   7.782252,
    8.461889,   8.528779,   9.743318,   8.980551,   8.988222,   9.505488,  14.085440,  10.310433,   8.802371,  10.933444,   9.659706,   7.424229,   3.406052,
    5.737038,   6.852230,   3.584781,   4.180019,   5.820969,   4.324932,   3.784364,   3.153991,   0.950106,  -0.655836,  -1.452430,  -1.475467,  -2.739363,
   -6.789286,  -8.362358,  -9.792851, -10.952550, -11.018932, -11.189870, -11.452620,  -8.572799,  -7.478070,  -6.274646,  -4.936085,  -1.912075,  -2.038725,
   -4.416510,  -7.167256,  -4.583902,   0.128225,   0.159357,   3.032476,   3.339196,   1.632738,  -0.798074,   0.037498,   2.168810,   3.506713,   5.551944,
    6.149951,   6.754965,   8.035018,  13.772251,   8.487614,   5.189421,   5.488057,   4.570240,   5.763821,   4.387342,   3.200650,   2.232477,   2.022355,
    0.533629,   0.054794,   0.462619,   1.418984,   1.823891,   2.297576,   7.154052,   6.413096,   5.502915,   5.729020,   5.376992,   5.885415,   5.281579,
    5.383050,   5.365776,   7.695883,  11.303723,  10.705538,  14.606197,  10.972866,   4.673807,   5.289882,   4.233136,   3.849696,   4.200580,   6.547714,
    6.367223,   5.239007,   6.596992,   5.202498,   5.048481,   6.190446,   5.895844,   5.562573,   5.583701,   8.194058,   7.168855,   7.153922,   5.803898,
    4.413848,   4.897679,   4.348684,   5.049765,   4.897362,   5.061704,   4.201576,   3.652829,   4.165542,   4.243895,   4.472646,   4.593919,   4.490603,
    6.063587,   7.116787,   8.988403,   9.258056,   8.154969,   8.778709,   9.014491,   6.479355,   7.145123,   9.818933,   8.197268,   8.798827,   8.840003,
    8.194610,   7.219204,   7.357635,   8.208699,   7.013590,   4.419734,   3.309052,   3.456138,   5.411810,   6.146553,   5.379672,   6.203613,   5.699147,
   10.740801,   9.047908,   6.227445,   6.444097,   5.359432,   1.286067,   7.276705,  16.918329,   5.529634,   7.812426,   5.957302,   0.812922,  -0.598735,
    1.295077,  -0.653942,  -1.465129,  -0.540441,   1.451314,   0.623724,   1.002251,  -2.025047,  -0.481248,   0.520210,  -1.971393,  -2.262331,  -1.280726,
    0.118021,  -0.015027,  -0.638131,   2.204336,   2.414140,  -0.225984,   0.334184,   0.627991,   1.212120,   0.364126,   1.475726,   2.275672,   1.576758,
    1.350508,   0.654453,   0.590723,   2.983766,   3.824504,   5.344023,   5.401426,   4.903016,   3.833822,   3.445408,   3.228336,   2.528498,   2.191749,
    1.106412,  -0.088273,   0.123402,  -0.279075,  -0.119446,  -1.716709,  -1.583310,   0.133243,  -0.452815,   0.140589,   0.130290,   0.658057,   1.549758,
    0.656715,   1.549165,   3.654918,   2.318129,   1.452114,   2.815146,   3.237226,   3.896650,   2.436382,   3.783980,   3.315849,   2.530221,   3.637155,
    3.865556,   4.277894,   3.521895,   3.873197,   4.546343,   5.064293,   5.455592,   4.242173,   4.654085,   5.681772,   5.003762,   4.113599,   3.852026,
    3.375498,   1.820929,   1.685411,   0.666541,   0.450216,  -0.161480,  -0.411367,   1.095853,   0.962282 ]

rfv = [  0.329504,  1.526465,  2.790072,  1.862920,  1.447969,  3.044542,  3.010644,  1.582126,  0.218154,  0.872812,  0.268032, -0.527845,  0.079599,  1.877194
   2.025657,  0.610823,  0.213093,  0.887393,  0.973548, -0.993731, -1.879378, -0.230705, -0.476396, -2.562527, -2.785210, -1.835341, -2.918312, -4.188460
  -4.370830, -2.949690, -3.025761, -6.911521, -7.659567, -5.738690, -3.931470, -2.107092, -0.663541, -2.101601, -2.155896, -2.640288, -2.888525, -3.302484
  -2.856276, -2.117891, -2.436193, -2.798931, -2.793426, -2.153167, -2.664910, -3.350380, -3.408489, -1.488364, -0.368869, -1.911689, -0.396007,  0.398724
  -1.230426, -1.686120, -0.713210,  0.932664, -0.286009, -1.082159, -0.534393, -1.113075, -2.935506, -3.165649, -2.907525, -2.712566, -3.396745, -2.746210
  -2.464080, -2.913151, -1.318253,  0.028208, -0.791427, -0.865551,  0.859303,  0.889298,  0.374068,  0.362720,  1.574413,  0.459038, -0.661521, -0.733464
  -0.234012,  0.192312, -0.085373, -0.545729,  1.073308,  1.131190, -0.283835, -0.538156,  0.656248,  1.878262,  1.499000,  1.542128,  2.328277,  1.230808
   0.269806,  0.766288,  1.719339,  1.237301, -3.302205, -6.563096, -5.097727, -1.997561,  0.592041,  3.102817,  3.850025,  1.702185,  0.661854, -0.401967
  -3.215350, -5.259640, -4.925394, -4.408107, -5.083309, -5.217114, -4.371748, -4.508782, -5.448206, -4.368489, -5.301051, -6.313919, -5.674489, -3.927424
  -3.483491, -4.263371, -3.443273, -2.961406, -2.602052, -2.999304, -2.217954, -2.224388, -2.458635, -2.139433, -1.148385, -2.524679, -3.333907, -2.487990
  -0.286027,  0.924134,  0.446757,  0.142303,  1.791354,  2.334671,  1.024844,  0.935466,  1.932891, -0.105480, -0.530329, -0.148490,  0.148379, -0.967713
  -1.450048, -0.581126, -0.474791, -0.896880,  0.030455,  0.986794, -0.073780,  0.474806,  2.351958,  3.270041,  2.181040,  1.531307,  1.898890,  3.305941
   1.771260,  1.510675,  2.016285,  3.031645,  3.752064,  1.799812,  2.263720,  3.069431,  4.831124,  4.000156,  2.652655,  2.260491,  2.239712,  2.117523
   0.738630,  0.409372,  0.755805, -1.516480, -2.094326, -1.362871,  0.665143,  0.764292, -0.239134, -0.054274,  1.265925,  0.156211, -1.715294, -2.443658
  -1.065664, -0.960518, -1.801274, -1.419663, -1.134763, -2.752249, -4.048666, -2.621153, -0.576538, -0.528155, -1.461221, -1.648723, -1.335274, -0.126197
  -1.117170, -2.009856, -0.452704, -0.971927, -1.799750, -0.691605, -0.919735, -0.854565, -1.231220, -0.968208, -0.920197, -1.068426, -0.725977, -0.150869
   1.335491, -0.918588, -4.048919, -2.942374, -1.226673,  2.372214,  4.922458,  4.710790,  3.958195,  2.184483, -1.149747, -3.093653, -2.602862, -2.572075
  -3.241193, -2.140730, -1.968406, -3.764643, -5.187757, -3.216845, -3.263582, -4.438844, -3.687524, -2.315511, -2.049623, -2.604361, -0.923247,  1.602886
   1.543069,  1.421513,  2.265461,  3.309072,  2.084955, -0.887118, -1.250628, -0.536205,  0.923789,  0.576903, -0.417696, -0.266544, -0.295104, -0.868069
  -1.587073, -0.829225,  0.409300, -0.556420, -1.157231, -1.230744,  0.133926,  0.646742,  0.381498,  0.775434,  1.378601,  0.624099, -0.918632,  0.523824
   0.299589, -1.815440, -1.511564,  0.016128,  1.030170,  0.462820, -0.556559, -1.387945, -0.710069,  0.370180, -1.425780, -1.759998, -1.879962, -0.336553
  -0.210598, -1.356722, -1.615980, -1.302006, -0.065924, -0.727363, -0.271047, -0.080769, -1.232832, -0.608307,  1.450328,  0.355730, -0.396803,  0.165852
   1.687552,  0.676260,  0.470184,  1.090545,  3.777531,  4.455765,  2.005653,  2.548896,  2.427737,  4.382204,  4.203366,  2.954565,  2.336193,  1.825987
  -0.431064, -0.826089, -1.626455, -2.981115, -3.658547, -1.909805, -0.967531, -1.368479, -0.616961,  0.207239,  2.277896,  1.182858 ]

fs = 1  
#%%
def app0(index, f):
  pass
  N = 15 * f
  t = np.arange(-5 * f, 10 * f - 1) / f

  if index == 0:
    pass
    B = np.array([1])
    A = np.array([1])
  else:
    pass
    ARI = np.array([
      [2, 1.6, 0.2], 
      [2, 1.5, 0.4],
      [2, 1.15, 0.6],
      [2, 0.9, 0.8],
      [1.9, 0.75, 0.9],
      [1.6, 0.65, 0.94],
      [1.2, 0.55, 0.96],
      [0.87, 0.52, 0.97],
      [0.65, 0.5, 0.98]
    ])
    T = ARI[index][1]
    D = ARI[index][2]
    K = ARI[index][3]
    m = f * T
    n = 2 * D
    B = np.array([m**2, 1+n*m-2*m**2-K, m**2-n**m])
    A = B + np.array([0, K, 0])
  return B, A
#%%
  def ari(step, fs, L):
    pass

#%%
seg_x = [ -3.651437,
-2.285495,
-5.950580,
-2.925318,
-0.022436,
 0.097322,
 1.714918,
 0.759397,
-0.370812,
 0.230426,
-0.062103,
-0.133841,
-1.257611,
 0.821082,
-6.713676,
-5.649186,
 2.197243,
 0.665995,
 0.835562,
 0.922694,
-3.779185,
-1.855731,
 4.905784,
 2.723674,
 3.906812,
 3.789671,
 3.379661,
 1.767550,
 0.568296,
 0.512269,
-0.085780,
-3.412937,
-6.366575,
 3.101856,
 3.354800,
 1.907026,
 3.971007,
 2.642626,
 1.702065,
 1.668018,
 1.797033,
 1.268710,
 1.451449,
 1.567453,
 1.579481,
 0.836254,
 0.262332,
 1.072359,
 0.356604,
-1.276993,
-2.611706,
-1.381688,
-1.563065,
-2.704743,
-1.492614,
-0.607329,
-1.480669,
-1.212626,
-0.363515,
 0.880223 ]
seg_x = np.array(seg_x)
seg_d = [  1.600626,
 2.797586,
 4.061193,
 3.134042,
 2.719090,
 4.315664,
 4.281765,
 2.853247,
 1.489275,
 2.143933,
 1.539153,
 0.743276,
 1.350720,
 3.148315,
 3.296778,
 1.881944,
 1.484214,
 2.158514,
 2.244669,
 0.277391,
-0.608257,
 1.040416,
 0.794725,
-1.291406,
-1.514089,
-0.564219,
-1.647191,
-2.917339,
-3.099709,
-1.678569,
-1.754640,
-5.640400,
-6.388446,
-4.467569,
-2.660348,
-0.835971,
 0.607580,
-0.830480,
-0.884775,
-1.369167,
-1.617404,
-2.031363,
-1.585155,
-0.846770,
-1.165071,
-1.527810,
-1.522304,
-0.882046,
-1.393789,
-2.079259,
-2.137367,
-0.217242,
 0.902253,
-0.640568,
 0.875114,
 1.669845,
 0.040695,
-0.414999,
 0.557912,
 2.203785 ]
seg_d = np.array(seg_d)
L = 12
option = 'b'

#%%
def firpara(u, y, nb, option):
  pass
  u = u.T
  y = y.T
  N = len(u)
  if option == 'u':
    pass
    fai = np.zeros((N, nb))
    for i in range(0, N - nb):
      pass
      fai[i] = u[np.arange(i + nb - 1, i - 1, -1)]
    averfai = fai.T @ fai
    ny = y[np.arange(nb, len(y) - 1)]
    averfaiy = fai.T @ ny.T
    B = np.linalg.inv(averfai) @ averfaiy
  elif option == 'b':
    pass
    fai = np.zeros((N, nb))
    u = np.concatenate([np.zeros((nb - 1)), u])
    for i in range(0, N - 1):
      pass
      fai[i] = u[np.arange(i + nb - 1, i - 1, -1)]
    averfai = fai.T @ fai
    averfaiy = fai.T @ y.T
    B = np.linalg.inv(averfai) @ averfaiy
  return B, fai
# B, fai = firpara(seg_x, seg_d, L, 'b')
# print(B)
# print(fai)

#%%
def variance5(x, d, fs):
  pass 
  start = 0
  finish = 60 * fs - 1
  while finish <= x:
    pass
    seg_x = x[0: finish]
    seg_d = d[0: finish]
    seg_x = seg_x - np.mean(seg_x)
    seg_d = seg_d - np.mean(seg_d)
